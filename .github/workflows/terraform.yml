name: "Terraform"

on:
  push:
    branches:
      - develop
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Configure AWS creds
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Run unit tests
      - name: Run tests
        run: npm install && npm run test

      # Build storybook
      - name: Build storybook
        run: npm run build-storybook

      # Build React app
      - name: Build React App
        run: npm run build

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: "./terraform"
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: "./terraform"
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: "./terraform"
        run: terraform plan

        # On push to develop, build or change infrastructure according to Terraform configuration files

      - name: Terraform Apply
        working-directory: "./terraform"
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Deploy app build to S3 bucket
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: aws s3 sync ./build/ s3://comics-ui --delete

      - name: Deploy storybook build to S3 bucket
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: aws s3 sync ./storybook-static/ s3://comics-storybook --delete
